@page "/CreatePost"
@using Domain.DTOs
@using Application.Logic
@using HttpClients.AuthServices
@using HttpClients.ClientInterfaces
@using System.Security.Claims
@inject IPostService postservice;
@inject IAuthService authService
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize]
<AuthorizeView>
<h3>Hello, @context.User.Identity?.Name Create a New Post </h3>

<div class="form-group">
    <label for="Title">Title:</label>
    <input id="Title" @bind="title" class="form-control" />
</div>

<div class="form-group">
    <label for="Body">Body:</label>
    <textarea id="Body" @bind="body" class="form-control"></textarea>
</div>

<button @onclick="Create">Create Post</button>

@if(!string.IsNullOrEmpty(resultMsg))
{
    <div class="@color">
        @resultMsg
    </div>
}

</AuthorizeView>
@code {
    private string title = "";
    private string body = "";
    private string resultMsg = "";
    private string color = "";
    private readonly GlobalLoggedIn LoggedInUser;
    private string currentUsername;

  protected override async Task OnInitializedAsync()
  {
      var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        currentUsername = authState.User.Identity?.Name ?? "UnknownUser";
    }

    
    public async Task Create()
    {
        resultMsg = "";
        
        try
        {
         
            await postservice.Create(new PostCreationDTO(currentUsername, title, body));
            resultMsg = "Post successfully created";
            color = "green";

        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            resultMsg = e.Message;
            color = "red";
        }


    }
}